@page "/FileUpload"
@using Microsoft.Extensions.Logging
@using DataLibrary.Model
@using System.IO
@using CsvHelper
@using System.Globalization
@using System.Data
@using System.Text

@inject ILogger<FileUpload> Logger
@inject IJSRuntime JsRuntime

<h3>Upload Files</h3>

<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles CSV file of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

<p>
    <button disabled="@(loadedFiles.Count==0)" class="btn btn-primary" @onclick="@ParseData">Upload Files to Database</button>
</p>

@if (isLoading)
{
    <p>Ciagle pracuje...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private List<Stream> streams = new();

    private long maxFileSize = 1048576 * 3;
    private int maxAllowedFiles = 1;
    private bool isLoading;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        streams.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                if (Files.CheckExtenstion(file.Name, ".csv") == false)
                {
                    Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, "Incorrect extension");
                }
                else
                {
                    Stream stream = new MemoryStream();
                    file.OpenReadStream().CopyToAsync(stream);

                    streams.Add(stream);
                    loadedFiles.Add(file);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);

            }
        }

        isLoading = false;
    }
    private void ParseData()
    {
        if (loadedFiles.Count > 0)
        {
            (long correct, long incorrect) resultnum = (0, 0);
            foreach (var item in streams)
            {

                string result = System.Text.Encoding.UTF8.GetString((item as MemoryStream).ToArray());
                DataLibrary.Model.Files.ParserCSV(item, ref resultnum);

            }

            StringBuilder msb = new StringBuilder();
            msb.Append(@"Done, please check Event Data page. ");
            msb.AppendLine($"Correct records added: {resultnum.correct}, incorrect records find {resultnum.incorrect}");
            PopupBox(msb.ToString());
        }
    }
    private async Task PopupBox(string txt)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", txt);
    }

}